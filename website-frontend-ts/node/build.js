/* eslint-env node */
/* eslint-disable no-console, no-process-env, no-process-exit, no-sync */
const webpack = require("webpack");
const env = require("./env");
const fs = require("fs-extra");
const webpackConfig = require("./webpack.config.build");
const AutoDllPlugin = require("autodll-webpack-plugin");
const ParallelUglifyPlugin = require("webpack-parallel-uglify-plugin");
const HTMLPlugin = require("html-webpack-plugin");

process.env.BABEL_ENV = "production";
process.env.NODE_ENV = "production";
process.on("unhandledRejection", (error) => {
    throw error;
});

function configureDLL(config) {
    Object.entries(env.packageJSON.config.lib).forEach(([name, lib]) => {
        config.plugins.push(new AutoDllPlugin({
            context: env.root,
            inject: true,
            debug: true,
            filename: "[name].[hash:8].js",
            path: "static/js",
            plugins: [
                new webpack.DefinePlugin({"process.env": {NODE_ENV: JSON.stringify("production")}}),
                new ParallelUglifyPlugin({
                    cacheDir: `${env.nodeModules}/.cache/webpack-parallel-uglify-plugin`,
                    sourceMap: true,
                    uglifyJS: {}
                }),
                new webpack.optimize.ModuleConcatenationPlugin()
            ],
            inherit: true,
            entry: {[name]: lib}
        }));
    });
}

function configurePages(config) {
    Object.entries(env.packageJSON.config.pages).forEach(([name, page]) => {
        webpackConfig.entry[name] = `${env.src}/${page.js}`;
        webpackConfig.plugins.push(new HTMLPlugin({
            filename: `${name}.html`,
            template: `${env.src}/${page.template}`,
            chunks: ["manifest", "vendor", name],
            minify: {
                collapseBooleanAttributes: true,
                collapseInlineTagWhitespace: true,
                collapseWhitespace: true,
                includeAutoGeneratedTags: false,
                keepClosingSlash: true,
                minifyCSS: true,
                minifyJS: true,
                minifyURLs: true,
                removeAttributeQuotes: true,
                removeComments: true,
                removeEmptyAttributes: true,
                removeRedundantAttributes: true,
                removeScriptTypeAttributes: true,
                removeStyleLinkTypeAttributes: true,
                removeTagWhitespace: true,
                useShortDoctype: true
            }
        }));
    });
}

console.info("cleanup build/dist");
fs.emptyDirSync(env.dist);
console.info("copy static folder to dist");
fs.copySync(env.static, env.dist, {
    dereference: true
});
configureDLL(webpackConfig);
configurePages(webpackConfig);
const compiler = webpack(webpackConfig);
compiler.run((error, stats) => {
    if (error) {
        console.error(error.stack || error);
        if (error.details) console.error(error.details);
        process.exit(1);
    } else {
        console.log(stats.toString({
            chunks: false,
            colors: true
        }));
        if (stats.hasErrors() || stats.hasWarnings()) {
            process.exit(1);
        }
    }
});
